
AVRA   Ver. 1.2.3 ./master-mcu.src.asm Thu Oct 25 23:35:23 2012


          .include "m8def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m8def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega8
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega8
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega8
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ	ADCSRA	=$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GICR  (former GIMSK)
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	RWWSB	=6
          .equ	RWWSRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1	; OBSOLETE! Use WGM11
          .equ	PWM10	=0	; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4	; OBSOLETE! Use WGM13
          .equ	CTC10	=3	; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3	
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6	; OBSOLETE! Use WGM20
          .equ	WGM20	=6	
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3	; OBSOLETE! Use WGM21
          .equ	WGM21	=3	
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDCE	=4
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	UPE	=2
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWA6    =7
          .equ    TWA5    =6
          .equ    TWA4    =5
          .equ    TWA3    =4
          .equ    TWA2    =3
          .equ    TWA1    =2
          .equ    TWA0    =1
          .equ    TWGCE   =0
         
         ; TWSR
          .equ    TWS7    =7
          .equ    TWS6    =6
          .equ    TWS5    =5
          .equ    TWS4    =4
          .equ    TWS3    =3
          .equ	TWPS1	=1
          .equ	TWPS0	=0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
          .equ	FLASHEND =$FFF
         
         						;  byte groups
         						;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b00111110000000  ;($0F80) smallest boot block is 256
          .equ 	SECONDBOOTSTART	=0b00111100000000  ;($0F00) 2'nd boot block size is 512
          .equ 	THIRDBOOTSTART	=0b00111000000000  ;($0E00) third boot block size is 1K
          .equ 	LARGEBOOTSTART	=0b00110000000000  ;($0C00) largest boot block is 2K
          .equ 	BOOTSTART		=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE		=32     ;number of WORDS in a page
         
          .equ	INT0addr=$001	; External Interrupt0 Vector Address
          .equ	INT1addr=$002	; External Interrupt1 Vector Address
          .equ	OC2addr =$003	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$004	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$005	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$006	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$007	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$008	; Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00a	; SPI Interrupt Vector Address
          .equ	URXCaddr=$00b	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00d	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00e	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$00f	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$010	; Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$011   ; Irq. vector address for Two-Wire Interface
          .equ	SPMaddr =$012	; SPM complete Interrupt Vector Address
          .equ	SPMRaddr =$012	; SPM complete Interrupt Vector Address
         ; INFO INFO INFO
         ; fosc = 8MHz
         ; Fuse-bits : MSB ... LSB (76543210)
         ;   High byte: 11111111
         ;   Low byte : 11100100
         
         ; 68 cycles per each drive w/o spi chat 
         ; 5bytes*8bits/byte = 40bits for spi chat = 160 clocks
         ; 68+160 +7 = 235 clocks
         ; SPI RAM operation uses protocol for Microchip 23A640 64kbit RAM IC
         ; необходимо ожидать 7 такта после выбора ведомого устройства
         
         ; PROGRAM
         
         ; maximum Number of drives that could be controlled
          .equ MAX_NDRIVES_GLOBAL = 0x04 ; it should be a power of two
         ; number of last drive
          .equ MAX_DRIVE_NUM = 0x03 ; it is MAX_NDRIVES_GLOBAL-1
         ; size of drive comand
          .equ DR_COM_SZ = 0x01
         ; size of comand indices
          .equ COM_IND_SZ = 0x02
         ; max number of comands for each drive
          .equ MAX_NUM_COM_DRV = 0x0400
         ; number of clocks that one iteration of OneDriveCycle cycle gets to be done (approx) (dec - 155)
          .equ RealTimeOneCycle = 0x9b
         
          .def temp = r17
          .def temp2 = r18
          .def dataTemp = r16
          .def temp3 = r14
         
         ; just for drives number and comands r/w -------------
         ; temporary 2bytes
          .def tempL = r4
          .def tempH = r5
         ; counter of comands already recieved and writen to (or read from in further operation) RAM for current drive
          .def CurComNumL = r6
          .def CurComNumH = r7
         ; temporary place for TimeScale (as a counter)
          .def tempScale = r10
         ; Time scale (0..255)
          .def TimeScale = r11
         ; temp place for comand
          .def temp_com = r12
         ; index of current drive ( which is worked now )
          .def CurDrvNum = r17
         ; drive commands number SRAM field size (as register)
          .def DrComNumSzReg = r18
         ; Number of bytes in RAM that is used for commands for drive. = MAX_NUM_COM_DRV
          .def coms_pages = r19
         ; Max number of comands per drive (as register)
          .def MaxNumComsL = r20
          .def MaxNumComsH = r21
         ; Max number of drives to be controlled (as register)
          .def MaxNDrivesReg = r22
         ; Number of drives to be controlled
          .def Ndrv = r23
         ; Low address for RAM
          .def RAMaddrL = r24
         ; High address for RAM
          .def RAMaddrH = r25
         ; Total Number of comands for current drive (when read from UART)
          .def DrvComNumL = r26
          .def DrvComNumH = r27
         
         ; Drive selecting I/O port
          .equ SelectorPort = PORTC
         ; Drive selecting register
          .def SelectorReg = r12
         ; Pin for deselecting drives
          .equ DrivesDeselPin = PC5
         ; This reg is working as fully clear reg for operations like adc with 0 operand
          .def CleanReg = r11
         ; ----------------------------------
         
          .def tempBaudRateH = r17
          .def tempBaudRateL = r16
          .equ DDR_SPI = DDRB
          .equ DD_SCK = DDB5
          .equ DD_MISO = DDB4
          .equ DD_MOSI = DDB3
         
         ; Memory read/write data and read/write status register commands
          .equ RAM_RDSR = 0b00000101
          .equ RAM_WRSR = 0b00000001
          .equ RAM_READ = 0b00000011
          .equ RAM_WRTE = 0b00000010
         
         ; enable RAM byte operation mode without a HOLD functionality
          .equ RAM_SB_byte_oper = 0b00000011
         
         ; uart baudrate coeff
          .equ uart_baudrate_h = 0b00000000
          .equ uart_baudrate_l = 0b00110011
         
         ; uart data start byte from PC
          .equ UartDataStartByte = 0b11001001
         ; uart ack for data start
          .equ UartDataStartAck = 0b00110110
         ; uart continue byte
          .equ UartContByte = 0b01101101
         
         ; #MemorySelect pin number 0 @ port B
         ; #MemorySelect
          .equ MemSelPort = PORTB
          .equ MemSelBit = PB0
         
         ; Status leds
          .equ StatusReadyPort = PORTD
          .equ StatusConfigDone = PD7
          .equ StatusUartTxRx = PD6
          .equ StatusSpiTxRx = PD5
         
         ; SRAM offset
          .equ SRAMoffset = 0x0100
          .equ NdrivesOff = 0x0000
          .equ NdrivesSz = 0x0001
          .equ DrComNumSz = 0x0001
         
         ; motor syncing port and pin
          .equ SyncMotorPort = PORTB
          .equ SyncMotorPin = PB1
         
         ; zero address
C:000000 c000      rjmp MAIN;
         
         ; ------------ MAIN --------------
          MAIN:
           ; configurations block
           ; stack init
C:000001 e51f      	ldi temp, low(RAMEND);
C:000002 e024      	ldi temp2, high(RAMEND);
C:000003 bf2e      	out SPH, temp2;
C:000004 bf1d      	out SPL, temp;
         
           ; communications configuration
C:000005 d091      	rcall ConfigPorts;
C:000006 d098      	rcall SPI_MasterInit;
C:000007 d0a4      	rcall RAM_Config;
C:000008 d0aa      	rcall RAM_Clear;
C:000009 d0bd      	rcall UART_Init;
C:00000a 9a97      	sbi StatusReadyPort, StatusConfigDone;
         
           ; communication with PC block
            WaitDataStart:
C:00000b d0c4      	rcall UART_Rcv;
C:00000c 3c09      	cpi dataTemp, UartDataStartByte;
C:00000d f7e9      	brne WaitDataStart;
           ; begin of data from PC
C:00000e 9a96      	sbi StatusReadyPort, StatusUartTxRx;
C:00000f e306      	ldi dataTemp, UartDataStartAck;
C:000010 d0c3      	rcall UART_Snd;
         
           ; begin communication with PC
           ; Ndrives in
            UartNdrivesIn:
C:000011 d0be      	rcall UART_Rcv;
C:000012 2f10      	mov temp, dataTemp;
           ; Write Ndrives to SRAM
C:000013 e0f1      	ldi ZH, High(SRAMoffset+NdrivesOff);
C:000014 e0e0      	ldi ZL, Low(SRAMoffset+NdrivesOff);
C:000015 8300      	st Z, dataTemp;
C:000016 9631      	adiw ZH:ZL, NdrivesSZ;
           ; save Ndrives to Ndrv
C:000017 2f70      	mov Ndrv, dataTemp;
         
           ; Allow further communication with PC
C:000018 e60d      	ldi dataTemp, UartContByte;
C:000019 d0ba      	rcall UART_Snd;
         
           ; recieve TimeScale byte
C:00001a d0b5      	rcall UART_Rcv;
C:00001b 2eb0      	mov TimeScale, dataTemp;
         
           ; Allow further communication with PC
C:00001c e60d      	ldi dataTemp, UartContByte;
C:00001d d0b6      	rcall UART_Snd;
         
           ; Recieving commands numbers
C:00001e 2f17      	mov CurDrvNum, Ndrv;
            CommNumRcv:
C:00001f d0b0      		rcall UART_Rcv;
C:000020 9301      		st Z+, dataTemp;
C:000021 d0ae      		rcall UART_Rcv;
C:000022 9301      		st Z+, dataTemp;
         ;		adiw ZH:ZL, DrComNumSz;
C:000023 951a      		dec CurDrvNum;
C:000024 f7d0      	brcc CommNumRcv;
           ; Recieving drives commands number is over
         
           ; allowing further communications
C:000025 e60d      	ldi dataTemp, UartContByte;
C:000026 d0ad      	rcall UART_Snd;
         
           ; Now - recieving comands
C:000027 e0f1      	ldi ZH, High(SRAMoffset+NdrivesOff+NdrivesSZ);
C:000028 e0e1      	ldi ZL, Low(SRAMoffset+NdrivesOff+NdrivesSZ);
C:000029 2799      	clr RAMaddrH;
C:00002a 2788      	clr RAMaddrL;
C:00002b e034      	ldi coms_pages, High(MAX_NUM_COM_DRV); coms_pages has a size for comands in full 256bytes pages 
         	; select RAM for SPI operation
C:00002c 98c0      	cbi MemSelPort, MemSelBit
         
C:00002d 2f17      	mov CurDrvNum, Ndrv;
            CommandsRcv:
C:00002e 91a1      	ld DrvComNumL, Z+;		; number of comands for current drive is read from SRAM
C:00002f 91b1      	ld DrvComNumH, Z+;
C:000030 2466      	clr CurComNumL;			; number of comands already read from UART
C:000031 2477      	clr CurComNumH;
            OneComandRcv:
C:000032 d09d      		rcall UART_Rcv;
C:000033 2ec0      		mov temp_com, dataTemp;
         	; save dataTemp contents to RAM
C:000034 e002      		ldi dataTemp, RAM_WRTE;
C:000035 d06e      		rcall SPI_MasterTransmit;
         
C:000036 2f09      		mov dataTemp, RAMaddrH;
C:000037 d06c      		rcall SPI_MasterTransmit;
C:000038 2f08      		mov dataTemp, RAMaddrL;
C:000039 d06a      		rcall SPI_MasterTransmit;
         
C:00003a 2d0c      		mov dataTemp, temp_com;
C:00003b d068      		rcall SPI_MasterTransmit;
         
C:00003c 9601      		adiw RAMaddrH:RAMaddrL, DR_COM_SZ;
         
         	; making inc to 2byte reg variable
         ;		ldi dataTemp, 0x01;
         ;		add CurComNumL, dataTemp;
         ;		ldi dataTemp, 0x00;
         ;		adc CurComNumH, dataTemp;
         
C:00003d e60d      		ldi dataTemp, UartContByte;
C:00003e d095      		rcall UART_Snd;
         		; One command recieved
         
C:00003f 50a1      		subi DrvComNumL, 0x01;
C:000040 40b0      		sbci DrvComNumH, 0x00;
         		; если DrvComNumH:DrvComNumL != 0x0000
C:000041 f780      		brcc OneComandRcv;
         		; commands for CurDrvNum drive recieved
C:000042 2788      	clr RAMaddrL;
C:000043 0f93      	add RAMaddrH, coms_pages;
         
C:000044 951a      	dec CurDrvNum;
C:000045 f740      	brcc CommandsRcv;
         
           ; now deselect ram from spi operation
C:000046 9ac0      	sbi MemSelPort, MemSelBit;
         
           ; waiting for allowement for drives controlling and SPI tx/rx with slave MCUs
            WaitDataStart_for_SPI:
C:000047 d088      	rcall UART_Rcv;
C:000048 360d      	cpi dataTemp, UartContByte;
C:000049 f7e9      	brne WaitDataStart_for_SPI;
           ; It is ok to start working with slave MCUs
         
C:00004a 9896      	cbi StatusReadyPort, StatusUartTxRx;
         
           ; now operating on SPI
C:00004b 9a95      	sbi StatusReadyPort, StatusSpiTxRx;
         
C:00004c 24bb      	clr CleanReg
C:00004d 24cc      	clr SelectorReg;
C:00004e bab5      	out SelectorPort, CleanReg;
         
           ; make register copyes of some literals (immidiates)
C:00004f e022      	ldi DrComNumSzReg, COM_IND_SZ;
C:000050 e064      	ldi MaxNDrivesReg, MAX_NDRIVES_GLOBAL;
C:000051 e040      	ldi MaxNumComsL, Low(MAX_NUM_COM_DRV);
C:000052 e054      	ldi MaxNumComsH, High(MAX_NUM_COM_DRV);
           ; need that for "and"
C:000053 e073      	ldi Ndrv, (MAX_NDRIVES_GLOBAL-0x01)
            LargeHadronCollider:
          	OneDriveCycle:
           ; time scaling implementation
C:000054 2cab      		mov tempScale, TimeScale;
          	TimeScaleFull:
          		; dataTemp reg is unused now, though we can use it
C:000055 e90b      		ldi dataTemp, RealTimeOneCycle;
          	TimeScaleOneTime:
C:000056 950a      			dec dataTemp;
         			; dataTemp is still not a zero? dec it once more!
C:000057 f7f0      			brcc TimeScaleOneTime;
C:000058 94aa      		dec tempScale;
         		; tempScale is still not a zero? dec it once more
C:000059 f7d8      		brcc TimeScaleFull;
         
           ; loading current drive total commands number
C:00005a e0f1      		ldi ZH, High(SRAMoffset+NdrivesOff+NdrivesSz);
C:00005b e0e1      		ldi ZL, Low(SRAMoffset+NdrivesOff+NdrivesSz);
           ; address shift for current drive total commands number (in SRAM)
C:00005c 9d2c      		mul DrComNumSzReg, SelectorReg;
C:00005d 0de0      		add ZL, r0;
C:00005e 1df1      		adc ZH, r1;
           ; load current drive total commands number
C:00005f 91a1      		ld DrvComNumL, Z+;
C:000060 91b1      		ld DrvComNumH, Z+;
C:000061 9732      		sbiw ZH:ZL, COM_IND_SZ;
           ; address shift for current drive current command index (in SRAM)
C:000062 9f26      		mul DrComNumSzReg, MaxNDrivesReg;
C:000063 0de0      		add ZL, r0;
C:000064 1df1      		adc ZH, r1;
           ; load current drive command index
C:000065 9071      		ld CurComNumH, Z+;
C:000066 9061      		ld CurComNumL, Z+;
           ; check if command index is less than total commands number
           ; when ot is not - we make index equal to zero
C:000067 012d      		movw tempH:tempL, DrvComNumH:DrvComNumL;
C:000068 1846      		sub tempL, CurComNumL;
C:000069 f421      		brne IndexOk;
C:00006a 0857      		sbc tempH, CurComNumH;
C:00006b f411      		brne IndexOk;
            ClearComandIndex:
C:00006c 2466      		clr CurComNumL;
C:00006d 2477      		clr CurComNumH;
            IndexOk:
           ; load comand from external RAM
C:00006e 9d5c      		mul MaxNumComsH, SelectorReg;
C:00006f 2c20      		mov r2,r0;
C:000070 9d4c      		mul MaxNumComsL, SelectorReg;
C:000071 0c21      		add r2, r1;
           ; copy r0->RAMaddrL, r1->RAMaddrH
C:000072 01c0      		movw RAMaddrL, r0;
           ; offset responsively to current command index
C:000073 0d86      		add RAMaddrL, CurComNumL;
C:000074 1d97      		adc RAMaddrH, CurComNumH;
           ; select RAM
C:000075 98c0      		cbi MemSelPort, MemSelBit;
           ; Retrieve data from RAM
C:000076 e003      		ldi dataTemp, RAM_READ;
C:000077 d02c      		rcall SPI_MasterTransmit;
         
C:000078 2f09      		mov dataTemp, RAMaddrH;
C:000079 d02a      		rcall SPI_MasterTransmit;
         
C:00007a 2f08      		mov dataTemp, RAMaddrL;
C:00007b d028      		rcall SPI_MasterTransmit;
         
C:00007c d02b      		rcall SPI_Recieve;
         
           ; deselect RAM from SPI operation
C:00007d 9ac0      		sbi MemSelPort, MemSelBit;
           ; select current drive for SPI operation
C:00007e bac5      		out SelectorPort, SelectorReg;
C:00007f 9aad      		sbi SelectorPort, DrivesDeselPin;
           ; waiting 7 clocks for slave to eneble its SPI xfering
C:000080 0000      		nop;
C:000081 0000      		nop;
C:000082 0000      		nop;
C:000083 0000      		nop;
C:000084 0000      		nop;
C:000085 0000      		nop;
C:000086 0000      		nop;
           ; send dataTemp (command is still there) to selected slave
C:000087 d01c      		rcall SPI_MasterTransmit;
           ; deselect slave
C:000088 98ad      		cbi SelectorPort, DrivesDeselPin;
           ; change to next command for this drive;
C:000089 e001      		ldi dataTemp, 0x01;
C:00008a 0e60      		add CurComNumL, dataTemp;
C:00008b e000      		ldi dataTemp, 0x00;
C:00008c 1e70      		adc CurComNumH, dataTemp;
           ; store new comand index to SRAM (Z-register has not changed yet, that sounds like good ;-)
C:00008d 9732      		sbiw ZH:ZL, COM_IND_SZ;
C:00008e 9261      		st Z+, CurComNumL;
C:00008f 9271      		st Z+, CurComNumH;
         
           ; change to next drive
C:000090 94c3      		inc SelectorReg;
C:000091 22c7      		and SelectorReg, Ndrv;
C:000092 f608      	brcc OneDriveCycle;					68 cycles per each drive w/o spi chat
C:000093 9ac1      	sbi SyncMotorPort, SyncMotorPin;
C:000094 0000      	nop;
C:000095 98c1      	cbi SyncMotorPort, SyncMotorPin;
C:000096 cfbd      	rjmp LargeHadronCollider;
         
         ; ------------------------------- MAIN FINISHED -----------------------------
         
         ; ----------- PROCS ------------
         ; configure ports
         ; In - NONE
         ; Out - NONE
          ConfigPorts:
         	; config drive selector (PORTC) - 0,1,2,3,4,5 - out, 6 - in
C:000097 e31f      	ldi temp, 0b00111111;
C:000098 bb14      	out DDRC, temp;
         	; config memory selector (PORTB) - 0, MOSI, SCK, [1, 2 - unsused,for safety] - out, MISO - in.
C:000099 e21f      	ldi temp, 0b00101111;
C:00009a bb17      	out DDRB, temp;
         	; config UART and status (PORTD) - 1,2,3,5,6,7 - out, 0,4 - in
C:00009b ee1e      	ldi temp, 0b11101110;
C:00009c bb11      	out DDRD, temp;
         	; globaly disable interrupts
C:00009d 94f8      	cli;
C:00009e 9508      	ret
         
         ; allow SPI
         ; In - NONE
         ; Out - NONE
          SPI_MasterInit:
         ; Set MOSI and SCK direction to output, all others are set to input
C:00009f e21f      	ldi temp, (1<<DD_MOSI)|(1<<DD_SCK)|(1<<MemSelBit)|(1<<1)|(1<<2)
C:0000a0 bb17      	out DDR_SPI,temp
         	; Enable SPI, Master, set clock rate fck/4
C:0000a1 e510      	ldi temp, (1<<SPE)|(1<<MSTR)
C:0000a2 b91d      	out SPCR, temp
         	; Double the clock rate! up to fck/2
         ;	sbi SPSR, SPI2X
C:0000a3 9508      	ret
         
         ; SPI tranmition as master
         ; In - dataTemp - byte to be tranmitted
         ; Out - NONE
          SPI_MasterTransmit:
         ; Start transmission of data (r16)
C:0000a4 b90f      	out SPDR, dataTemp
            Wait_Transmit:
         ; Wait for transmission complete
C:0000a5 9b77      	sbis SPSR,SPIF
C:0000a6 cffe      	rjmp Wait_Transmit
C:0000a7 9508      	ret
         
         ; SPI recieve routine (it uses FIFO-ed SPI with 0b00000000 data to be sent)
         ; In - NONE
         ; Out - dataTemp - retrieved byte
          SPI_Recieve:
C:0000a8 2700      	clr dataTemp
C:0000a9 dffa      	rcall SPI_MasterTransmit
C:0000aa b10f      	in dataTemp, SPDR
C:0000ab 9508      	ret
         
         ; prepare ram for byte operation (before communication with PC)
         ; In - NONE
         ; Out - NONE
          RAM_Config:
           ; select RAM for SPI operation
C:0000ac 98c0      	cbi MemSelPort, MemSelBit
           ; ram preparation for byte operation mode
C:0000ad e001      	ldi dataTemp, RAM_WRSR
C:0000ae dff5      	rcall SPI_MasterTransmit
         
C:0000af e003      	ldi dataTemp, RAM_SB_byte_oper
C:0000b0 dff3      	rcall SPI_MasterTransmit
         
           ; deselct ram for SPI transmition
C:0000b1 9ac0      	sbi PORTB, MemSelBit
C:0000b2 9508      	ret
         
         ; clear RAM
         ; In - NONE
         ; Out - NONE
          RAM_Clear:
         	; select RAM for SPI operation
C:0000b3 98c0      	cbi MemSelPort, MemSelBit
C:0000b4 e074      	ldi Ndrv, MAX_NDRIVES_GLOBAL;
C:0000b5 2788      	clr RAMaddrL;
C:0000b6 2799      	clr RAMaddrH;
            ClearRAMAllDrives:
C:0000b7 e014      	ldi temp, High(MAX_NUM_COM_DRV);
C:0000b8 0f19      	add temp, RAMaddrH;
            ClearRAMOneDrive:
C:0000b9 e002      		ldi dataTemp, RAM_WRTE;
C:0000ba dfe9      		rcall SPI_MasterTransmit;
         
C:0000bb 2f09      		mov dataTemp, RAMaddrH;
C:0000bc dfe7      		rcall SPI_MasterTransmit;
         
C:0000bd 2f08      		mov dataTemp, RAMaddrL;
C:0000be dfe5      		rcall SPI_MasterTransmit;
         
C:0000bf 2700      		clr dataTemp;
C:0000c0 dfe3      		rcall SPI_MasterTransmit;
         
C:0000c1 9601      		adiw RAMaddrH:RAMaddrL, 0x01;
         
C:0000c2 1719      		cp temp, RAMaddrH;
C:0000c3 f7a9      	brne ClearRAMOneDrive;
         
C:0000c4 957a      	dec Ndrv;
C:0000c5 f789      	brne ClearRAMAllDrives;
C:0000c6 9508      	ret
         
         ; UART initialization @ 9600 bps
         ; In - NONE
         ; Out - NONE
          UART_Init:
           ; setting baudrate
C:0000c7 e010      	ldi tempBaudRateH, uart_baudrate_h
C:0000c8 e303      	ldi tempBaudRateL, uart_baudrate_l
C:0000c9 bd10      	out UBRRH, tempBaudRateH
C:0000ca b909      	out UBRRL, tempBaudRateL
           ; setting frame format: 8data bits, 2 stop bits
C:0000cb e80e      	ldi dataTemp, (1<<URSEL)|(1<<USBS)|(3<<UCSZ0)
C:0000cc bd00      	out UCSRC, dataTemp
           ; Enable reciever and transmitter
C:0000cd e108      	ldi dataTemp, (1<<RXEN)|(1<<TXEN)
C:0000ce b90a      	out UCSRB, dataTemp
C:0000cf 9508      	ret
         
         ; UART recieve proc
         ; In - NONE
         ; Out - dataTemp - recieved byte
          UART_Rcv:
C:0000d0 9b5f      	sbis UCSRA, RXC
C:0000d1 cffe      	rjmp UART_Rcv
C:0000d2 b10c      	in dataTemp, UDR
C:0000d3 9508      	ret
         
         ; UART send proc
         ; In - dataTemp - byte to be transmitted over UART
         ; Out - NONE
          UART_Snd:
C:0000d4 9b5d      	sbis UCSRA, UDRE
C:0000d5 cffe      	rjmp UART_Snd
          CheckFinishPrevSnd:
C:0000d6 9b5e      	sbis UCSRA, TXC
C:0000d7 cffe      	rjmp CheckFinishPrevSnd
C:0000d8 b90c      	out UDR, dataTemp
C:0000d9 9508      	ret
         


Segment usage:
   Code      :       218 words (436 bytes)
   Data      :         0 bytes
   EEPROM    :         0 bytes

Assembly completed with no errors.
